services:
  traefik:
    image: traefik:v3.0
    container_name: ulinda-traefik
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
      - "./acme.json:/acme.json"
    networks:
      - ulinda-network
    restart: unless-stopped

  postgres:
    image: postgres:17
    container_name: ulinda-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ulinda-network

  backend:
    build: 
      context: ./backend
    container_name: ulinda-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`dev.ulinda.org`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    depends_on:
      - postgres
    networks:
      - ulinda-network

  frontend:
    build:
      context: ./frontend
    container_name: ulinda-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dev.ulinda.org`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - backend
    networks:
      - ulinda-network

volumes:
  postgres_data:

networks:
  ulinda-network:
    driver: bridge